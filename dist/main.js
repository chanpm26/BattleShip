(()=>{"use strict";function e(e,t){for(let n=0;n<e.gameBoard.board.length;n++){let a=document.createElement("div");if(a.classList.add("gameSquare"),a.classList.add(e.playerName),a.setAttribute("data-id",n),t.appendChild(a),""!=e.gameBoard.board[n]){let e=document.createElement("img");e.src="/dist/ship.png",a.appendChild(e)}}}const t=()=>{let e=[[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]],t=[],n=[],a=[];return{board:e,listOfShips:t,missedAttacks:n,placeShip:function(n,a,o){let s=function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[],a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:[];const o=e=>(e=parseInt(e),!!n.includes(e)&&(a.push(e),!0));return{nameOfShip:e,length:t,coordinates:n,whereHit:a,sunkStatus:arguments.length>4&&void 0!==arguments[4]&&arguments[4],hit:o,isSunk:function(e){return t==a.length}}}(n,a,o);return o.forEach((t=>e[t].push(s))),t.push(s),e},receiveAttack:function(t){return""!=e[t]?(a.push(t),{attackStatus:e[t][0].hit(t),shipStatus:e[t][0].isSunk()}):(n.push(t),!1)},report:function(){return t.map((e=>1==e.sunkStatus)).includes(!1)?"There are still alive ships":"All ships have sunk!"}}},n=function(e,n){return{playerName:e,sendAttack:function(e,t){let n="valid";return e.missedAttacks.includes(t)||null!=e.successfulAttacks&&e.successfulAttacks.includes(t)?(n="notValid",n):"valid"==n?e.receiveAttack(t):void alert("Your move has already been picked. Please choose another one.")},gameBoard:t()}};let a=n("playerOne");a.gameBoard.placeShip("five",5,[1,2,3,4,5]),a.gameBoard.placeShip("four",4,[40,41,42,43]),a.gameBoard.placeShip("three",3,[57,58,59]),a.gameBoard.placeShip("two",5,[99,98]);let o=n("playerTwo");function s(e,t,n){e==a?(t.style.pointerEvents="none",n.style.pointerEvents="auto"):e==o&&(n.style.pointerEvents="none",t.style.pointerEvents="auto")}o.gameBoard.placeShip("five",5,[81,82,83,84,85]),o.gameBoard.placeShip("four",4,[63,64,65,66]),o.gameBoard.placeShip("three",3,[22,32,42]),o.gameBoard.placeShip("two",5,[79,89]);const i=document.getElementById("boardOne"),r=document.getElementById("boardTwo"),l=document.getElementById("begin-button"),c=document.getElementById("playerOneName");let d=document.getElementById("player-name"),u=a,p="";d.addEventListener("input",(function(){p=d.value})),l.addEventListener("click",(function(){!function(){const e=document.getElementById("welcomeScreenContainer"),t=document.getElementById("main-container");e.classList.add("hidden"),t.classList.remove("hidden")}(),function(e,t){e.textContent=""!=t?t:"Anonymous Challenger"}(c,p),e(a,i),e(o,r),function(e,t,n){s(e,t,n),Array.from(document.getElementsByClassName("gameSquare")).forEach((i=>{i.addEventListener("click",(function(){let r=i.getAttribute("data-id");if(e==a){let l=a.sendAttack(o.gameBoard,r);1==l.attackStatus?i.style.backgroundColor="green":i.style.backgroundColor="red",1==l.shipStatus&&console.log("A ship becomes feast for the fishes"),s(e=o,t,n)}else if(e==o){let l=o.sendAttack(a.gameBoard,r);1==l.attackStatus?i.style.backgroundColor="green":i.style.backgroundColor="red",1==l.shipStatus&&console.log("The waves will strip this ship to its bones..."),s(e=a,t,n)}}))}))}(u,i,r)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,